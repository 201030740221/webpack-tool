// Generated by CoffeeScript 1.9.3
(function() {
  var WebpackDevServer, _, assign, browserSync, cwd, express, gutil, path, proxyMiddleware, webpack, webpackDevConfig;

  assign = require('object-assign');

  webpack = require('webpack');

  WebpackDevServer = require('webpack-dev-server');

  webpackDevConfig = require('./configs/webpack.config');

  browserSync = require('browser-sync');

  proxyMiddleware = require('http-proxy-middleware');

  gutil = require('gulp-util');

  express = require("webpack-dev-server/node_modules/express");

  path = require('path');

  cwd = process.cwd();

  _ = require('lodash');

  module.exports = function(opts, mode) {
    var bundleStart, devServer, logData, serverConfig, serverPort, webpackDevCompiler;
    opts = _.cloneDeep(opts);
    serverConfig = {
      contentBase: opts.server.entry,
      publicPath: opts.server.publicPath,
      hot: opts.webpack.base.hot || false,
      stats: {
        colors: true,
        progress: true
      },
      watchOptions: {
        aggregateTimeout: 100
      },
      noInfo: true
    };
    serverPort = opts.server.devPort || 3210;
    logData = function(data) {
      return gutil.log(gutil.colors.bold(gutil.colors.blue(data)));
    };
    logData('Name : ' + opts.name);
    logData('PORT : ' + opts.server.webPort);
    logData('WEBPACK DEV SERVER PORT : ' + serverPort);
    logData('WEBPACK DEV SERVER HOST : ' + "localhost");
    logData('Environment : ' + opts.env);
    webpackDevCompiler = webpack(webpackDevConfig(opts || {}, mode));
    bundleStart = null;
    webpackDevCompiler.plugin('compile', function() {
      gutil.log('编译中...');
      return bundleStart = Date.now();
    });
    webpackDevCompiler.plugin('done', function() {
      return gutil.log('编译耗时 ' + (Date.now() - bundleStart) + 'ms!');
    });
    devServer = new WebpackDevServer(webpackDevCompiler, serverConfig);
    devServer.app.use(express["static"](path.join(cwd, '/dist/' + opts.version)));
    return devServer.listen(serverPort, "0.0.0.0", function(err) {
      var middlewareProxy, options;
      if (err) {
        throw err;
      }
      gutil.log('正准备编译项目，请耐心等待...');
      middlewareProxy = [];
      if (opts.server.isProxy) {
        opts.server.proxyUrl.map(function(url) {
          return middlewareProxy.push(proxyMiddleware(url, {
            target: opts.server.proxyHost,
            changeOrigin: true
          }));
        });
      }
      options = {
        ui: false,
        proxy: "localhost:" + serverPort,
        port: opts.server.webPort,
        logFileChanges: false,
        middleware: middlewareProxy,
        ghostMode: false,
        notify: false,
        open: "external"
      };
      if (opts.server.liveload) {
        options.files = [opts.server.entry + '/**'];
      }
      browserSync(options);
      if (opts.callback) {
        return opts.callback();
      }
    });
  };

}).call(this);
