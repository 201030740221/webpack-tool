// Generated by CoffeeScript 1.9.3
(function() {
  var WebpackDevServer, _, assign, browserSync, cwd, express, gutil, path, proxyMiddleware, webpack, webpackDevConfig;

  assign = require('object-assign');

  webpack = require('webpack');

  WebpackDevServer = require('webpack-dev-server');

  webpackDevConfig = require('./configs/webpack.config');

  browserSync = require('browser-sync');

  proxyMiddleware = require('http-proxy-middleware');

  gutil = require('gulp-util');

  express = require("webpack-dev-server/node_modules/express");

  path = require('path');

  cwd = process.cwd();

  _ = require('lodash');

  module.exports = function(opts, mode) {
    var logData, middlewareProxy, options;
    opts = _.cloneDeep(opts);
    logData = function(data) {
      return gutil.log(gutil.colors.bold(gutil.colors.blue(data)));
    };
    logData('Name : ' + opts.name);
    logData('PORT : ' + opts.server.webPort);
    logData('Environment : ' + opts.env);
    middlewareProxy = [];
    if (opts.server.isProxy) {
      opts.server.proxyUrl.map(function(url) {
        return middlewareProxy.push(proxyMiddleware(url, {
          target: opts.server.proxyHost,
          changeOrigin: true
        }));
      });
    }
    options = {
      ui: false,
      server: path.join(cwd, opts.webpack.base.output),
      port: opts.server.webPort,
      logFileChanges: false,
      middleware: middlewareProxy,
      ghostMode: false,
      notify: false,
      open: "external"
    };
    if (opts.server.liveload) {
      options.files = [path.join(cwd, opts.webpack.output) + '/**/*'];
    }
    return browserSync.init(options);
  };

}).call(this);
